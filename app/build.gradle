apply plugin: 'com.android.application'
apply from: "$rootDir/tools/common.gradle"
apply plugin: 'io.fabric'
apply plugin: "androidx.navigation.safeargs"

// apply from: "$rootDir/tools/ktlint.gradle"
// apply from: "$rootDir/tools/test-dependencies.gradle"

android {
    def fabricPropertiesFile = rootProject.file("app/fabric.properties")
    def fabricProperties = new Properties()
    if (fabricPropertiesFile.exists()) {
        fabricProperties.load(new FileInputStream(fabricPropertiesFile))
    }

    defaultConfig {
        applicationId "aykuttasil.com.modernapp"

        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        ext.betaDistributionEmails = "aykuttasil@gmail.com"
        ext.betaDistributionNotifications = true
        resValue "string", "io.fabric.ApiKey", fabricProperties['apiKey']
    }

    def keystorePropertiesFile = rootProject.file("keystore.properties")
    def keystoreProperties = new Properties()
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }
    signingConfigs {
        debug {
            keyAlias keystoreProperties['signingKeyAliasDebug']
            keyPassword keystoreProperties['signingKeyAliasPasswordDebug']
            storeFile file(keystoreProperties['signingStoreFileDebug'])
            storePassword keystoreProperties['signingStorePasswordDebug']
        }

        release {
            keyAlias keystoreProperties['signingKeyAlias']
            keyPassword keystoreProperties['signingKeyAliasPassword']
            storeFile file(keystoreProperties['signingStoreFile'])
            storePassword keystoreProperties['signingStorePassword']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix '-DEBUG'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions "default"
    productFlavors {
        prod {
            dimension "default"
            resValue "string", "app_name", "MAS"
            matchingFallbacks = ['']
        }

        dev {
            dimension "default"
            resValue "string", "app_name", "MAS Dev"
        }
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main.java.srcDirs += 'src/debug/kotlin'

        test.java.srcDirs += 'src/test/kotlin'
        androidTest.java.srcDirs += 'src/androidTest/kotlin'

        def commonTest = "src/commonTest/java"
        test.java.srcDirs += commonTest
        androidTest.java.srcDirs += commonTest
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests {
        includeAndroidResources = true
        returnDefaultValues = true

        all {
            testLogging {
                showExceptions = true
                showStandardStreams = true
                // exceptionFormat TestExceptionFormat.FULL
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    packagingOptions {
        exclude("META-INF/services/javax.annotation.processing.Processor")
        exclude("LICENSE.txt")
        exclude("META-INF/license/LICENSE.base64.txt")
        exclude("META-INF/NOTICE.txt")
        exclude("META-INF/LICENSE.txt")
        exclude("META-INF/rxjava.properties")
        exclude("META-INF/MANIFEST.MF")
        exclude("META-INF/main.kotlin_module")
        exclude("META-INF/atomicfu.kotlin_module")
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    dataBinding {
        enabled = true
    }

    androidExtensions {
        experimental = true
    }

    configurations.all {
        resolutionStrategy {
            force(Libs.rxjava)
            force("com.google.code.findbugs:jsr305:3.0.2")
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    implementation(project(':common'))
    implementation(project(":network"))

    testImplementation Libs.kotlinx_coroutines_test

    // Debug
    debugImplementation Libs.leakcanary_android
    debugImplementation(Libs.stetho)
    releaseImplementation(Libs.sherlock_no_op)
    debugImplementation(Libs.sherlock)

    implementation(Libs.legacy_support_v4)
    implementation(Libs.appcompat)
    implementation(Libs.material)
    implementation(Libs.fragment_ktx)
    implementation(Libs.vectordrawable_animated)
    implementation(Libs.cardview)
    implementation(Libs.constraintlayout)
    implementation(Libs.annotation)
    implementation(Libs.gridlayout)
    implementation(Libs.multidex)
    implementation(Libs.lifecycle_extensions)
    implementation(Libs.lifecycle_viewmodel_ktx)
    implementation(Libs.lifecycle_reactivestreams_ktx)
    implementation Libs.lifecycle_livedata_ktx
    implementation(Libs.room_runtime)
    kapt(Libs.room_compiler)
    implementation(Libs.room_rxjava2)
    implementation Libs.navigation_fragment_ktx
    implementation Libs.navigation_ui_ktx
    implementation Libs.work_runtime_ktx
    implementation Libs.work_rxjava2

    implementation(Libs.rxpermissions)

    implementation(Libs.crashlytics)
    implementation(Libs.butterknife)
    kapt(Libs.butterknife_compiler)
    implementation(Libs.gson)

    kapt(Libs.dagger_compiler)
    implementation(Libs.dagger)
    kapt(Libs.dagger_android_processor)
    implementation(Libs.dagger_android_support)

    // implementation(Libs.firebase_database)

    // Assisted Inject
    compileOnly Libs.assisted_inject_annotations_dagger2
    kapt Libs.assisted_inject_processor_dagger2
}
// apply(plugin = "com.google.gms.google-services")
